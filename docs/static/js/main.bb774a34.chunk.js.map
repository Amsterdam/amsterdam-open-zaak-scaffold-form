{"version":3,"sources":["utils/arrayToObject.ts","utils/humanize.ts","utils/positioners.tsx","utils/parseSchemaObjectToFormDefinition.ts","utils/getSchemaObjects.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["arrayToObject","arr","reduce","acc","item","humanize","str","replace","toLowerCase","toUpperCase","humanizeOptions","options","Object","entries","key","val","columnPositioner","numColumns","index","column","row","Math","floor","horizontalPositioner","position","fields","breakPoint","positioner","produce","draft","props","generateStandardFields","prefix","propertyName","schemaObject","name","hint","description","label","title","generateFormDefinitionKey","equalColumns","num","buttonGutter","fractions","Array","map","_","push","join","getSchemaObjectFromOperationObject","operationObject","requestBody","content","schema","fetchSchema","url","a","headers","Headers","set","fetch","result","json","$RefParser","dereference","Div","styled","div","StyledSpinner","Spinner","apiOptions","App","useState","isFetching","setIsFetching","undefined","api","setAPI","setSchema","setResult","setNumColumns","useEffect","then","openAPIObject","schemaObjects","paths","pathname","pathObject","patch","put","post","schemaOptions","keys","openAPISchema","formDefinition","parseSchemaObjectToFormDefinition","indexOffset","parseField","property","type","object","length","enum","items","properties","scaffoldFields","allowAdd","allowRemove","columns","console","warn","allOf","oneOf","size","withEmptyOption","onChange","e","target","value","parseInt","mutators","arrayMutators","onSubmit","values","log","render","JSON","stringify","laptop","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb774a34.chunk.js","sourcesContent":["export const arrayToObject = (arr:string[]) => arr.reduce(\n  (acc, item) => ({ ...acc, [item]: item }),\n  {}\n);\n","export const humanize = (str:string) =>\n  str\n    .replace(/\\./g, ' ')                                          // replace '.' with ' '\n    .replace(/_/g, ' ')                                           // replace '_' with ' '\n    .replace(/([A-Z])/g, ' $1')                                   // camelCase -> Camel Case\n    .toLowerCase()                                                // Lowercase everything\n    .replace(/^./, function(str){ return str.toUpperCase(); })    // uppercase first letter\n\nexport const humanizeOptions = (options:Record<string, string>) =>\n  Object\n    .entries(options)\n    .reduce((acc, [key, val]) => ({ ...acc, [key]: humanize(val) }), {})\n","import {FormGridCellDimensions, ScaffoldFieldsType} from \"amsterdam-react-final-form\";\nimport produce from \"immer\";\n\ntype BreakPoint = \"mobileS\" | \"mobileM\" | \"mobileL\" | \"tabletS\" | \"tabletM\" | \"laptop\" | \"laptopM\" | \"laptopL\" | \"desktop\" | \"desktopL\";\n\nexport type Positioner = (\n  index:number\n) => FormGridCellDimensions\n\nexport const columnPositioner = (numColumns:number):Positioner => (\n  index:number\n): FormGridCellDimensions => ({\n    column: index % numColumns,\n    row: Math.floor(index / numColumns)\n})\n\nexport const horizontalPositioner:Positioner = (\n  index:number\n): FormGridCellDimensions => ({\n  column: index,\n  row: 0\n})\n\nexport const position = (fields:ScaffoldFieldsType, breakPoint:BreakPoint, positioner:Positioner) =>\n  Object\n    .entries(fields)\n    .reduce(produce((draft, [key, val], index) => {\n      val.props.position[breakPoint] = positioner(index)\n      draft[key] = val;\n    }), {})\n","import { SchemaObject } from \"openapi3-ts/src/model/OpenApi\"\nimport { ScaffoldFieldsType } from \"amsterdam-react-final-form\"\nimport {arrayToObject} from \"./arrayToObject\";\nimport {humanize, humanizeOptions} from \"./humanize\";\nimport {horizontalPositioner, position} from \"./positioners\";\n\nexport const generateStandardFields = (prefix: string, propertyName: string, schemaObject:SchemaObject) => ({\n  position: {},\n  name: prefix+propertyName,\n  hint: schemaObject.description,\n  label: schemaObject.title ?? humanize(propertyName)\n})\n\nexport const generateFormDefinitionKey = (prefix:string, propertyName:string) =>\n  (prefix + \"\" + propertyName).replace(/\\./g, '_')\n\nexport const equalColumns = (num:number, buttonGutter:boolean) => {\n  const fractions = [...Array(num)].map(_ => \"1fr\")\n  if (buttonGutter) {\n    fractions.push(\"auto\")\n  }\n  return fractions.join(\" \");\n}\n\nexport const parseSchemaObjectToFormDefinition = (schemaObject:SchemaObject, prefix:string = \"\", indexOffset:number = 0):ScaffoldFieldsType => {\n\n  const parseField = (acc:ScaffoldFieldsType, key:string, propertyName:string, property:SchemaObject, index:number) => {\n\n    switch(property.type) {\n      case \"object\":\n        const object = parseSchemaObjectToFormDefinition(property, propertyName+ \".\", index + indexOffset)\n        indexOffset += Object.keys(object).length\n        acc = { ...acc, ...object }\n        break;\n      case \"string\":\n        if (property.enum) {\n          acc[key] = {\n            type: \"SelectField\",\n            props: {\n              options: humanizeOptions(arrayToObject(property.enum)),\n              ...generateStandardFields(prefix, propertyName, property)\n            }\n          }\n        } else {\n          acc[key] = {\n            type: \"TextField\",\n            props: {\n              ...generateStandardFields(prefix, propertyName, property)\n            }\n          }\n        }\n        break;\n      case \"boolean\":\n        acc[key] = {\n          type: \"Boolean\",\n          props: {\n            ...generateStandardFields(prefix, propertyName, property)\n          }\n        }\n        break;\n      case \"number\":\n      case \"integer\":\n        acc[key] = {\n          type: \"NumberField\",\n          props: {\n            ...generateStandardFields(prefix, propertyName, property)\n          }\n        }\n        break;\n      case \"array\":\n\n        const items = ((property?.items as SchemaObject)?.type === \"object\")\n          ? property.items!\n          : { properties: { \"\": property.items! } }\n\n        const scaffoldFields = position(\n          parseSchemaObjectToFormDefinition(items),\n          \"mobileS\",\n          horizontalPositioner\n        )\n\n        acc[key] = {\n          type: \"ArrayField\",\n          props: {\n            scaffoldFields,\n            allowAdd: true,\n            allowRemove: true,\n            columns: equalColumns(Object.keys(scaffoldFields).length, true),\n            ...generateStandardFields(prefix, propertyName, property),\n          }\n        }\n\n        break;\n      default:\n        console.warn(\"Unknown type\", property.type)\n        break;\n    }\n    return acc;\n  }\n\n  const properties = schemaObject?.properties ?? {} as SchemaObject\n\n  return Object\n    .entries(properties)\n    .reduce((acc, [propertyName, property], index) => {\n      const key = generateFormDefinitionKey(prefix, propertyName)\n\n      if (property.allOf) {\n        return property\n          .allOf\n          .reduce((acc:ScaffoldFieldsType, property:SchemaObject) => parseField(acc, key, propertyName, property, index), acc)\n\n      } else if(property.oneOf) {\n        console.warn(\"property.oneOf detected! We haven't implemented that yet!\")\n\n        // TODO don't think this is the ideal situation.\n        return property\n          .oneOf\n          .reduce((acc:ScaffoldFieldsType, property:SchemaObject) => parseField(acc, key, propertyName, property, index), acc)\n\n      } else {\n        return parseField(acc, key, propertyName, property, index)\n      }\n\n    }, {} as ScaffoldFieldsType)\n}\n","import {OpenAPIObject, OperationObject, RequestBodyObject} from \"openapi3-ts\";\nimport {SchemaObject} from \"openapi3-ts/src/model/OpenApi\";\n\nconst getSchemaObjectFromOperationObject = (operationObject:OperationObject):SchemaObject|undefined =>\n  (operationObject?.requestBody as RequestBodyObject)?.content?.[\"application/json\"]?.schema\n\nexport const getSchemaObjects = (openAPIObject:OpenAPIObject) =>\n  Object\n    .entries(openAPIObject.paths)\n    .reduce((acc, [pathname, pathObject]) => {\n\n      if (pathObject.patch) {\n        const schema = getSchemaObjectFromOperationObject(pathObject.patch)\n        if (schema) {\n          acc[`PATCH ${pathname}`] = schema\n        }\n      }\n\n      if (pathObject.put) {\n        const schema = getSchemaObjectFromOperationObject(pathObject.put)\n        if (schema) {\n          acc[`PUT ${pathname}`] = schema\n        }\n      }\n\n      if (pathObject.post) {\n        const schema = getSchemaObjectFromOperationObject(pathObject.post)\n        if (schema) {\n          acc[`POST ${pathname}`] = schema\n        }\n      }\n\n      return acc;\n\n    }, {} as Record<string, SchemaObject>)\n","import React, {useEffect, useState} from 'react';\nimport {Form} from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport {UnboundSelectField, Scaffold} from 'amsterdam-react-final-form';\nimport styled from 'styled-components';\n\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\nimport {ThemeProvider, AccordionWrapper, Accordion, Spinner, Paragraph} from \"@datapunt/asc-ui\"\n\nimport './App.css';\nimport {arrayToObject} from \"./utils/arrayToObject\";\nimport {equalColumns, parseSchemaObjectToFormDefinition} from \"./utils/parseSchemaObjectToFormDefinition\";\nimport {getSchemaObjects} from \"./utils/getSchemaObjects\";\nimport {columnPositioner, position} from \"./utils/positioners\";\n\nconst fetchSchema = async (url:string) => {\n  const headers = new Headers();\n  headers.set('accept', 'application/json')\n\n  const result = await fetch(url, { headers });\n  const json = await result.json();\n\n  return $RefParser.dereference(json);\n};\n\nconst Div = styled.div`  \n  margin: 20px 20px;\n`\n\nconst StyledSpinner = styled(Spinner)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n`\n\nconst apiOptions = arrayToObject([\n  \"https://acc.api.top.amsterdam.nl/api/v1/schema/\",\n  \"https://zaken-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://documenten-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://catalogi-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://besluiten-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://autorisaties-api.vng.cloud/api/v1/schema/openapi.json\"\n])\n\nfunction App() {\n\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [api, setAPI] = useState<string|undefined>(undefined)\n  const [schema, setSchema] = useState<any>(undefined)\n  const [result, setResult] = useState<any>(undefined)\n  const [numColumns, setNumColumns] = useState(1)\n\n  useEffect(() => {\n    if (api) {\n      setIsFetching(true)\n      fetchSchema(api)\n        .then((result) => {\n          setResult(result)\n          setIsFetching(false)\n        })\n    } else {\n      setResult(null)\n    }\n  }, [api, setResult])\n\n\n  const schemaObjects = result ? getSchemaObjects(result) : {}\n  const schemaOptions = arrayToObject(Object.keys(schemaObjects))\n\n  const openAPISchema = schemaObjects[schema]\n\n  const formDefinition = position(\n    position(\n      parseSchemaObjectToFormDefinition(openAPISchema),\n      \"laptop\",\n      columnPositioner(numColumns)\n    ),\n    \"mobileS\",\n    columnPositioner(1)\n  )\n\n\n  return <ThemeProvider>\n    { isFetching && <StyledSpinner size={20} /> }\n    <Div>\n      <UnboundSelectField\n        label='API'\n        options={apiOptions}\n        withEmptyOption={true}\n        onChange={(e:React.ChangeEvent<HTMLSelectElement>) => {\n          setAPI(e.target.value);\n          setSchema(undefined);\n          setResult(undefined);\n        }}\n      />\n    </Div>\n    { result && (\n      <>\n        <Div>\n          <UnboundSelectField\n            label='Schema'\n            options={schemaOptions}\n            withEmptyOption={true}\n            onChange={(e:React.ChangeEvent<HTMLSelectElement>) => setSchema(e.target.value)}\n          />\n        </Div>\n        <Div>\n          <UnboundSelectField\n          label='Number of columns'\n          hint=\"Breakpoint is hardcoded on 'laptop' in this demo. But you can set them as you like.\"\n          options={arrayToObject(['1','2','3','4','5','6','7','8','9','10'])}\n          onChange={(e:React.ChangeEvent<HTMLSelectElement>) => setNumColumns(parseInt(e.target.value))}\n          />\n        </Div>\n      </>\n    ) }\n    { schema && (\n      <Form\n        mutators={{ ...arrayMutators }}\n        onSubmit={(values) => console.log(values)}\n        render={({values}) => (\n          <form>\n            <Div>\n              <AccordionWrapper>\n                <Accordion title=\"OpenAPI Schema\">\n                  <Paragraph>OpenAPI defines this requestBody.</Paragraph>\n                  <pre>{ JSON.stringify(openAPISchema, null, 2) }</pre>\n                </Accordion>\n                <Accordion title=\"Form Schema\">\n                  <Paragraph>This autogenerated form-schema should be imported in your project.</Paragraph>\n                  <pre>{ JSON.stringify(formDefinition, null, 2) }</pre>\n                </Accordion>\n                {/*<Accordion title=\"Form typescript\">*/}\n                {/*  <Paragraph>Make sure your FieldNames are type-safe and matching the api by coding your form like this:</Paragraph>*/}\n                {/*  <pre>{`<Scaffold formDefinition={formDefinition} />`}</pre>*/}\n                {/*  <Paragraph>Or, if you want to have a more fine grained control over your layout, you can code it like this:</Paragraph>*/}\n                {/*  <pre>{ formDefinition && formDefinitionToTs(formDefinition) }</pre>*/}\n                {/*</Accordion>*/}\n                <Accordion title=\"Scaffolded form\">\n                  <Scaffold fields={formDefinition} columns={{ laptop: equalColumns(numColumns, false) }} />\n                </Accordion>\n                <Accordion title=\"Form values\">\n                  <pre>{JSON.stringify(values, null, 2)}</pre>\n                </Accordion>\n              </AccordionWrapper>\n            </Div>\n          </form>\n        )}\n      />\n    )}\n  </ThemeProvider>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}