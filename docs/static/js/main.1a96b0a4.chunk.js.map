{"version":3,"sources":["utils/arrayToObject.ts","utils/humanize.ts","grid/Grid.ts","grid/FormPositioner.ts","grid/assertGridIsValid.ts","openAPIParser/parseOpenApiSchema.ts","openAPIParser/parseSchemaObjectToFormDefinition.ts","openAPIParser/getSchemaObjects.ts","openAPIParser/fetchSchema.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["arrayToObject","arr","reduce","acc","item","humanize","str","replace","toLowerCase","toUpperCase","humanizeOptions","options","Object","entries","key","val","Grid","grid","this","values","forEach","row","includes","push","topLeft","bottomRight","x","y","Error","slice","map","value","yIndex","xIndex","Math","min","max","FormPositioner","fields","getFields","breakPoint","arrayGrid","availableKeys","distinctValues","getDistinctValues","length","_difference","_","join","coordinates","getCoordinatesForValue","subGridDistinctValues","sliceArea","assertGridIsValid","keys","produce","draftState","props","position","column","columnSpan","rowSpan","numColumns","setGrid","_chunk","parseOpenApiSchema","openAPISchema","parseSchemaObjectToFormDefinition","generateStandardProps","prefix","propertyName","schemaObject","name","hint","description","label","title","generateFormDefinitionKey","equalColumns","num","buttonGutter","fractions","Array","indexOffset","parseField","property","index","type","object","enum","items","properties","scaffoldFields","setHorizontal","allowAdd","allowRemove","columns","console","warn","allOf","oneOf","getSchemaObjectFromOperationObject","operationObject","requestBody","content","schema","fetchSchema","url","a","headers","Headers","set","fetch","result","json","$RefParser","dereference","Div","styled","div","StyledSpinner","Spinner","apiOptions","App","useState","isFetching","setIsFetching","undefined","api","setAPI","setSchema","setResult","setNumColumns","useEffect","then","openAPIObject","schemaObjects","paths","pathname","pathObject","patch","put","post","schemaOptions","formDefinition","setVertical","size","withEmptyOption","onChange","e","target","parseInt","mutators","arrayMutators","onSubmit","log","render","JSON","stringify","laptop","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a96b0a4.chunk.js","sourcesContent":["export const arrayToObject = (arr:string[]) => arr.reduce(\n  (acc, item) => ({ ...acc, [item]: item }),\n  {}\n);\n","export const humanize = (str:string) =>\n  str\n    .replace(/\\./g, ' ')                                          // replace '.' with ' '\n    .replace(/_/g, ' ')                                           // replace '_' with ' '\n    .replace(/([A-Z])/g, ' $1')                                   // camelCase -> Camel Case\n    .toLowerCase()                                                // Lowercase everything\n    .replace(/^./, function(str){ return str.toUpperCase(); })    // uppercase first letter\n\nexport const humanizeOptions = (options:Record<string, string>) =>\n  Object\n    .entries(options)\n    .reduce((acc, [key, val]) => ({ ...acc, [key]: humanize(val) }), {})\n","type Coordinate = {\n  x:number,\n  y: number\n}\n\n/**\n * Two dimensional array grid.\n * Useful to position elements with.\n *\n * Example:\n *\n * new Grid([\n *  [1,2,3],\n *  [4,5,6],\n *  [7,8,9]\n * ])\n *\n */\nexport class Grid<T> {\n\n  constructor(protected grid:Array<Array<T>>) {}\n\n  getValues() {\n    return this.grid\n  }\n\n  /**\n   * Returns an array of distinct values in this grid\n   */\n  getDistinctValues():T[] {\n    const values:T[] = []\n\n    this.grid.forEach((row) => {\n      row.forEach((item) => {\n        if (!values.includes(item)) {\n          values.push(item)\n        }\n      })\n    })\n\n    return values\n  }\n\n  sliceArea(topLeft:Coordinate, bottomRight:Coordinate):Grid<T> {\n    if (topLeft.x > bottomRight.x || topLeft.y > bottomRight.y) {\n      throw new Error(\"Coordinates are mixed up. Please ensure topLeft is actually in the top-left corner. And bottomRight is actually in the bottom-right corner\")\n    }\n\n    return new Grid(\n      this.grid\n        .slice(topLeft.y, bottomRight.y + 1)\n        .map(row => row.slice(topLeft.x, bottomRight.x + 1))\n    )\n  }\n\n  getCoordinatesForValue(value:T) {\n    const x:number[] = [];\n    const y:number[] = [];\n\n    this.grid.forEach((row, yIndex) => {\n      row.forEach((item, xIndex) => {\n        if (item === value) {\n          x.push(xIndex)\n          y.push(yIndex)\n        }\n      })\n    })\n\n    return {\n      topLeft: { x: Math.min(...x), y: Math.min(...y)  },\n      bottomRight: { x: Math.max(...x), y: Math.max(...y)  }\n    }\n  }\n}\n","import produce from \"immer\"\nimport {ScaffoldFieldsType} from \"amsterdam-react-final-form\"\nimport _chunk from \"lodash/chunk\"\n\nimport {Grid} from \"./Grid\";\nimport {assertGridIsValid} from \"./assertGridIsValid\";\n\ntype BreakPoint = \"mobileS\" | \"mobileM\" | \"mobileL\" | \"tabletS\" | \"tabletM\" | \"laptop\" | \"laptopM\" | \"laptopL\" | \"desktop\" | \"desktopL\"\n\nexport class FormPositioner<T extends ScaffoldFieldsType> {\n\n  constructor(protected fields:T) {}\n\n  /**\n   * Position form elements responsively in a grid.\n   * Example usage:\n   *\n   *\n   * .setGrid(\"laptop\", [                               // Breakpoint from laptop to bigger\n   *    [\"title\",   \"title\",        \"title\"],           // NOTE: title has a colspan of 3\n   *    [\"street\",  \"number\",       \"city\"],\n   *    [\"code\",    \"description\",  \"description\"],     // NOTE: description has a colspan of 2, and a rowspan of 2\n   *    [\"status\",  \"description\",  \"description\"]\n   * ])\n   * .setVertical(\"mobileS\", 1)                         // NOTE: align everything in a single column for mobileS until laptop\n   *\n   */\n  public setGrid(breakPoint:BreakPoint, arrayGrid:Array<Array<keyof T>>) {\n    // Wrap array grid in a Grid object.\n    // It has some nice utility functions to work with.\n    const grid = new Grid(arrayGrid)\n\n    // Make sure the give grid is a valid grid:\n    assertGridIsValid(Object.keys(this.fields), grid)\n\n    // Update position attributes for the given fields:\n    const fields = produce(this.fields, draftState => {\n\n      // Loop through each distinct field:\n      grid.getDistinctValues().forEach((value) => {\n\n        const key = value as string\n        const { topLeft, bottomRight } = grid.getCoordinatesForValue(key)\n\n        // Update position:\n        draftState[key].props.position = {\n          // Spread current position\n          ...draftState[key].props.position,\n          // Update position for given breakpoint:\n          [breakPoint]: {\n            column: topLeft.x,\n            columnSpan: bottomRight.x - topLeft.x + 1,\n            row: topLeft.y,\n            rowSpan: bottomRight.y - topLeft.y + 1\n          }\n        }\n      })\n    })\n\n    // Return a new formPositioner.\n    // It allows us to chain, while still being immutable.\n    return new FormPositioner(fields)\n  }\n\n  setVertical(breakPoint:BreakPoint, numColumns:number = 1) {\n    return this.setGrid(\n      breakPoint,\n      _chunk(Object.keys(this.fields), numColumns)\n    )\n  }\n\n  setHorizontal(breakPoint:BreakPoint) {\n    return this.setGrid(\n      breakPoint,\n      [Object.keys(this.fields)]\n    )\n  }\n\n  getFields = ():T => {\n    return this.fields\n  }\n\n}\n","import {Grid} from \"./Grid\";\nimport _difference from \"lodash/difference\";\n\n\n/**\n * Makes sure all values in the grid have a rectangular shape.\n * We don't support Tetris types.\n */\nexport const assertGridIsValid = <T>(availableKeys:T[], grid:Grid<T>) => {\n\n  const distinctValues = grid.getDistinctValues()\n\n  // Check if all `availableKeys` have a place in the given grid\n  if (distinctValues.length < availableKeys.length) {\n    throw new Error(`Not all given fields are present in the grid. Please add these fields ${_difference(distinctValues, availableKeys).map(_ => `\"${_}\"`).join(\", \")}`)\n  }\n\n  // We don't support tetris-shaped values:\n  // E.g:\n  // [\n  //  [1,1,1],\n  //  [0,1,0]\n  // ]\n  distinctValues.forEach((value:T) => {\n\n    if (!availableKeys.includes(value)) {\n      throw new Error(`${value} is not an existing field. Existing fields are ${availableKeys.map(_ => `\"${_}\"`).join(\", \")}.`)\n    }\n\n    const coordinates = grid.getCoordinatesForValue(value)\n    const subGrid = grid.sliceArea(coordinates.topLeft, coordinates.bottomRight)\n\n    const subGridDistinctValues = subGrid.getDistinctValues()\n    if (subGridDistinctValues.length !== 1 || subGridDistinctValues[0] !== value) {\n      throw new Error(`Grid contains an unsupported shape. Please make sure \"${value}\" has a rectangular shape.`)\n    }\n  })\n\n  return true\n}\n","import {SchemaObject} from \"openapi3-ts\"\nimport {parseSchemaObjectToFormDefinition} from \"./parseSchemaObjectToFormDefinition\";\nimport {FormPositioner} from \"../grid/FormPositioner\";\n\nexport const parseOpenApiSchema = (openAPISchema:SchemaObject) =>\n  new FormPositioner(parseSchemaObjectToFormDefinition(openAPISchema))\n\n","import { SchemaObject } from \"openapi3-ts/src/model/OpenApi\"\nimport { ScaffoldFieldsType } from \"amsterdam-react-final-form\"\nimport {arrayToObject} from \"../utils/arrayToObject\";\nimport {humanize, humanizeOptions} from \"../utils/humanize\";\nimport {parseOpenApiSchema} from \"./parseOpenApiSchema\";\n\nexport const generateStandardProps = (prefix: string, propertyName: string, schemaObject:SchemaObject) => ({\n  position: {},\n  name: prefix+propertyName,\n  hint: schemaObject.description,\n  label: schemaObject.title ?? humanize(propertyName)\n})\n\nexport const generateFormDefinitionKey = (prefix:string, propertyName:string) =>\n  (prefix + \"\" + propertyName).replace(/\\./g, '_')\n\nexport const equalColumns = (num:number, buttonGutter:boolean) => {\n  const fractions = [...Array(num)].map(_ => \"1fr\")\n  if (buttonGutter) {\n    fractions.push(\"auto\")\n  }\n  return fractions.join(\" \");\n}\n\nexport const parseSchemaObjectToFormDefinition = (schemaObject:SchemaObject, prefix:string = \"\", indexOffset:number = 0):ScaffoldFieldsType => {\n\n  const parseField = (acc:ScaffoldFieldsType, key:string, propertyName:string, property:SchemaObject, index:number) => {\n\n    switch(property.type) {\n      case \"object\":\n        const object = parseSchemaObjectToFormDefinition(property, propertyName+ \".\", index + indexOffset)\n        indexOffset += Object.keys(object).length\n\n        Object\n          .entries(object)\n          .forEach(([key, val]) => {\n            acc[key] = val;\n          })\n\n//        acc = { ...acc, ...object }\n        break;\n      case \"string\":\n        if (property.enum) {\n          acc[key] = {\n            type: \"SelectField\",\n            props: {\n              options: humanizeOptions(arrayToObject(property.enum)),\n              ...generateStandardProps(prefix, propertyName, property)\n            }\n          }\n        } else {\n          acc[key] = {\n            type: \"TextField\",\n            props: {\n              ...generateStandardProps(prefix, propertyName, property)\n            }\n          }\n        }\n        break;\n      case \"boolean\":\n        acc[key] = {\n          type: \"Boolean\",\n          props: {\n            ...generateStandardProps(prefix, propertyName, property)\n          }\n        }\n        break;\n      case \"number\":\n      case \"integer\":\n        acc[key] = {\n          type: \"NumberField\",\n          props: {\n            ...generateStandardProps(prefix, propertyName, property)\n          }\n        }\n        break;\n      case \"array\":\n\n        const items = ((property?.items as SchemaObject)?.type === \"object\")\n          ? property.items!\n          : { properties: { \"\": property.items! } }\n\n        const scaffoldFields = parseOpenApiSchema(items)\n          .setHorizontal(\"mobileS\") // Align fields horizontally by default\n          .getFields()\n\n        acc[key] = {\n          type: \"ArrayField\",\n          props: {\n            scaffoldFields,\n            allowAdd: true,\n            allowRemove: true,\n            columns: equalColumns(Object.keys(scaffoldFields).length, true),\n            ...generateStandardProps(prefix, propertyName, property),\n          }\n        }\n\n        break;\n      default:\n        console.warn(\"Unknown type\", property.type)\n        break;\n    }\n    return acc;\n  }\n\n  const properties = schemaObject?.properties ?? {} as SchemaObject\n\n  return Object\n    .entries(properties)\n    .reduce((acc, [propertyName, property], index) => {\n      const key = generateFormDefinitionKey(prefix, propertyName)\n\n      if (property.allOf) {\n        return property\n          .allOf\n          .reduce((acc:ScaffoldFieldsType, property:SchemaObject) => parseField(acc, key, propertyName, property, index), acc)\n\n      } else if(property.oneOf) {\n        console.warn(\"property.oneOf detected! We haven't implemented that yet!\")\n\n        // TODO don't think this is the ideal situation.\n        return property\n          .oneOf\n          .reduce((acc:ScaffoldFieldsType, property:SchemaObject) => parseField(acc, key, propertyName, property, index), acc)\n\n      } else {\n        return parseField(acc, key, propertyName, property, index)\n      }\n\n    }, {} as ScaffoldFieldsType)\n}\n","import {OpenAPIObject, OperationObject, RequestBodyObject} from \"openapi3-ts\";\nimport {SchemaObject} from \"openapi3-ts/src/model/OpenApi\";\n\nconst getSchemaObjectFromOperationObject = (operationObject:OperationObject):SchemaObject|undefined =>\n  (operationObject?.requestBody as RequestBodyObject)?.content?.[\"application/json\"]?.schema\n\nexport const getSchemaObjects = (openAPIObject:OpenAPIObject) =>\n  Object\n    .entries(openAPIObject.paths)\n    .reduce((acc, [pathname, pathObject]) => {\n\n      if (pathObject.patch) {\n        const schema = getSchemaObjectFromOperationObject(pathObject.patch)\n        if (schema) {\n          acc[`PATCH ${pathname}`] = schema\n        }\n      }\n\n      if (pathObject.put) {\n        const schema = getSchemaObjectFromOperationObject(pathObject.put)\n        if (schema) {\n          acc[`PUT ${pathname}`] = schema\n        }\n      }\n\n      if (pathObject.post) {\n        const schema = getSchemaObjectFromOperationObject(pathObject.post)\n        if (schema) {\n          acc[`POST ${pathname}`] = schema\n        }\n      }\n\n      return acc;\n\n    }, {} as Record<string, SchemaObject>)\n","import fetch from \"isomorphic-fetch\"\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\nimport {OpenAPIObject} from \"openapi3-ts\";\n\nexport const fetchSchema = async (url:string) => {\n  const headers = new Headers();\n  headers.set('accept', 'application/json')\n\n  const result = await fetch(url, { headers });\n  const json = await result.json();\n\n  return await $RefParser.dereference(json) as unknown as OpenAPIObject\n};\n","import React, {useEffect, useState} from 'react'\nimport {Form} from 'react-final-form'\nimport arrayMutators from 'final-form-arrays'\nimport {UnboundSelectField, Scaffold} from 'amsterdam-react-final-form'\nimport styled from 'styled-components'\n\nimport {ThemeProvider, AccordionWrapper, Accordion, Spinner, Paragraph} from \"@datapunt/asc-ui\"\n\nimport './App.css'\nimport {arrayToObject} from \"./utils/arrayToObject\"\nimport {equalColumns} from \"./openAPIParser/parseSchemaObjectToFormDefinition\"\nimport {getSchemaObjects} from \"./openAPIParser/getSchemaObjects\"\nimport {parseOpenApiSchema} from \"./openAPIParser/parseOpenApiSchema\"\nimport {fetchSchema} from \"./openAPIParser/fetchSchema\"\n\nconst Div = styled.div`  \n  margin: 20px 20px;\n`\n\nconst StyledSpinner = styled(Spinner)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n`\n\nconst apiOptions = arrayToObject([\n  \"https://acc.api.top.amsterdam.nl/api/v1/schema/\",\n  \"https://zaken-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://documenten-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://catalogi-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://besluiten-api.vng.cloud/api/v1/schema/openapi.json\",\n  \"https://autorisaties-api.vng.cloud/api/v1/schema/openapi.json\"\n])\n\nfunction App() {\n\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [api, setAPI] = useState<string|undefined>(undefined)\n  const [schema, setSchema] = useState<any>(undefined)\n  const [result, setResult] = useState<any>(undefined)\n  const [numColumns, setNumColumns] = useState(1)\n\n  useEffect(() => {\n    if (api) {\n      setIsFetching(true)\n      fetchSchema(api)\n        .then((result) => {\n          setResult(result)\n          setIsFetching(false)\n        })\n    } else {\n      setResult(null)\n    }\n  }, [api, setResult])\n\n\n  const schemaObjects = result ? getSchemaObjects(result) : {}\n  const schemaOptions = arrayToObject(Object.keys(schemaObjects))\n  const openAPISchema = schemaObjects[schema]\n\n  const formDefinition = parseOpenApiSchema(openAPISchema)\n      .setVertical(\"mobileS\", numColumns)\n      .getFields()\n\n  return <ThemeProvider>\n    { isFetching && <StyledSpinner size={20} /> }\n    <Div>\n      <UnboundSelectField\n        label='API'\n        options={apiOptions}\n        withEmptyOption={true}\n        onChange={(e:React.ChangeEvent<HTMLSelectElement>) => {\n          setAPI(e.target.value);\n          setSchema(undefined);\n          setResult(undefined);\n          setNumColumns(1);\n        }}\n      />\n    </Div>\n    { result && (\n      <>\n        <Div>\n          <UnboundSelectField\n            label='Schema'\n            options={schemaOptions}\n            withEmptyOption={true}\n            onChange={(e:React.ChangeEvent<HTMLSelectElement>) => setSchema(e.target.value)}\n          />\n        </Div>\n        <Div>\n          <UnboundSelectField\n          label='Number of columns'\n          hint=\"Breakpoint is hardcoded on 'laptop' in this demo. But you can set them as you like.\"\n          options={arrayToObject(['1','2','3','4','5','6','7','8','9','10'])}\n          onChange={(e:React.ChangeEvent<HTMLSelectElement>) => setNumColumns(parseInt(e.target.value))}\n          />\n        </Div>\n      </>\n    ) }\n    { schema && (\n      <Form\n        mutators={{ ...arrayMutators }}\n        onSubmit={(values) => console.log(values)}\n        render={({values}) => (\n          <form>\n            <Div>\n              <AccordionWrapper>\n                <Accordion title=\"OpenAPI Schema\">\n                  <Paragraph>OpenAPI defines this requestBody.</Paragraph>\n                  <pre>{ JSON.stringify(openAPISchema, null, 2) }</pre>\n                </Accordion>\n                <Accordion title=\"Form Schema\">\n                  <Paragraph>This autogenerated form-schema should be imported in your project.</Paragraph>\n                  <pre>{ JSON.stringify(formDefinition, null, 2) }</pre>\n                </Accordion>\n                <Accordion title=\"Form typescript\">\n                  <Paragraph>Make sure your FieldNames are type-safe and matching the api by coding your form like this:</Paragraph>\n                  <pre>{`<Scaffold formDefinition={formDefinition} />`}</pre>\n                </Accordion>\n                <Accordion title=\"Scaffolded form\">\n                  <Scaffold fields={formDefinition} columns={{ laptop: equalColumns(numColumns, false) }} />\n                </Accordion>\n                <Accordion title=\"Form values\">\n                  <pre>{JSON.stringify(values, null, 2)}</pre>\n                </Accordion>\n              </AccordionWrapper>\n            </Div>\n          </form>\n        )}\n      />\n    )}\n  </ThemeProvider>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}